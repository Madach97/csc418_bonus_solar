// Hint: Crib from your model_view_projection.vs
// Layout:
//                                         Indicate that we're dealing with
//                                         triangles in CCW order and using a
//                                         sane spacing.
layout(triangles, equal_spacing, ccw) in;
// Uniforms
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_earth;
uniform bool is_venus;
uniform bool is_sun;
uniform bool is_mercury;
// Inputs:
//                    array of 3 3D patch corner positions
in vec4 pos_es_in[];
// Outputs:
//                   projected, view, and model transformed 3D position
out vec4 pos_fs_in;
//                        view and model transformed 3D position
out vec4 view_pos_fs_in;
//                      view and model transformed 3D normal
out vec3 normal_fs_in;
//                      3D position _before_ applying model, view or projection
//                      transformations (e.g., point on unit sphere)
out vec3 sphere_fs_in;
// expects: interpolat, model, 
void main()
{
  /////////////////////////////////////////////////////////////////////////////
  // Replace with your code 
  vec4 vector = interpolate(gl_TessCoord, pos_es_in[0], pos_es_in[1], pos_es_in[2]);
  sphere_fs_in = normalize(vector.xyz);
  vector = vec4(sphere_fs_in, 1);
  if(is_earth){
      mat4 scaling = uniform_scale(0.5);
      vector = scaling*vec4(sphere_fs_in, 1);
  }
  else if(is_venus){
	 mat4 scaling = uniform_scale(0.45);
     vector = scaling*vec4(sphere_fs_in, 1);
  }
  else if(is_mercury){
	 mat4 scaling = uniform_scale(0.3);
     vector = scaling*vec4(sphere_fs_in, 1);
  }
  mat4 m = model(is_sun, is_mercury, is_venus, is_earth, animation_seconds);
  view_pos_fs_in = view*m*vector;
  pos_fs_in = proj*view_pos_fs_in;

  vec3 n = sphere_fs_in; 
  mat4 N = inverse(transpose(view*m));
  normal_fs_in = (N*vec4(n, 1.0)).xyz;   
  gl_Position = pos_fs_in;
  /////////////////////////////////////////////////////////////////////////////
}


