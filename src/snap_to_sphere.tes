// Hint: Crib from your model_view_projection.vs
// Layout:
//                                         Indicate that we're dealing with
//                                         triangles in CCW order and using a
//                                         sane spacing.
layout(triangles, equal_spacing, ccw) in;
// Uniforms
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
//                    array of 3 3D patch corner positions
in vec4 pos_es_in[];
// Outputs:
//                   projected, view, and model transformed 3D position
out vec4 pos_fs_in;
//                        view and model transformed 3D position
out vec4 view_pos_fs_in;
//                      view and model transformed 3D normal
out vec3 normal_fs_in;
//                      3D position _before_ applying model, view or projection
//                      transformations (e.g., point on unit sphere)
out vec3 sphere_fs_in;
// expects: interpolat, model, 
void main()
{
  /////////////////////////////////////////////////////////////////////////////
  // Replace with your code 
  pos_fs_in = interpolate(gl_TessCoord, pos_es_in[0], pos_es_in[1], pos_es_in[2]);
  pos_fs_in = normalized(pos_fs_in);
  sphere_fs_in = (pos_fs_in).xyz;    
  if(is_moon){
      mat4 scaling = uniform_scale(0.3);
	  pos_fs_in = scaling*pos_fs_in;
  }
  mat4 m = model(moon, animation_seconds);
  view_pos_fs_in = view*m*pos_fs_in;
  pos_fs_in = proj*view_pos_fs_in;
  pos_fs_in = vec3(0, 0, 0);
  vec3 n = 2*sphere_fs_in; 
  mat4 N = inverse(transpose(m));
  normal_fs_in = (N*(vec4(n, 0))).xyz;   
 
  /////////////////////////////////////////////////////////////////////////////
}


